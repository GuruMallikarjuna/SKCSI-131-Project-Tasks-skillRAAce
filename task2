**SIMPLE NON-HASHED PASSWORD CRACKER**
Password Cracking Methods Comparison
This repository contains two Python scripts that demonstrate different methods for password cracking: Code 1 and Code 2. Each script employs various techniques to crack passwords from a specified list or input.

Code 1: Multi-method Password Cracking
Overview
Features: Allows users to choose between brute-force, dictionary, pattern matching, or combined attacks on passwords loaded from a file.
Libraries Used: itertools, re, string.
Functionality:
Brute-force Attack: Generates combinations of lowercase letters and digits up to a specified length.
Dictionary Attack: Checks passwords against a predefined list of common passwords.
Pattern Matching Attack: Uses regular expressions to match passwords against common patterns.
Combined Attack: Sequentially applies all three methods to maximize password discovery.
How to Use
Input File: Provide a file path containing passwords, one per line.
Attack Method: Choose an attack type (brute-force, dictionary, pattern matching, or combined) by entering the respective number.
Output: Displays passwords found by the chosen method and calculates the success rate of cracking passwords.
Code 2: Simple Password Cracking Functions
Overview
Features: Accepts a single password input and checks it against predefined lists and patterns.
Libraries Used: itertools, re, string.
Functionality:
Brute-force Attack: Checks for lowercase letters and digits combinations up to a practical length.
Dictionary Attack: Matches passwords against a predefined list of common passwords.
Pattern Matching Attack: Uses regular expressions to detect common patterns in passwords.
How to Use
Input Password: Enter a password to check its vulnerability.
Output: Indicates if the password can be cracked and which method (brute-force, dictionary, or pattern matching) succeeded.
